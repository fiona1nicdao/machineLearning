Intro Computer Vision
 Nov 7, 2024

CNN : compu

computer images 
    3 color channels 
    height: 4 units (pixels)
    width: 4 units (pixels)

Mnist dataset 
    hello world of deep learning 
    classify 28x28 pixels grayscale images of handwritten digits 

Load MNIST dataset 

Prepare trianing data

Network architecture 
    10 classes 
    so 10 outputs for all 10 claases 

complilation and training 
    compile to get data structure 
    specify the loss you want to use 
    the fit method to wheere you pass the training data 
    when you are trianing the data you are keeping an eye on the loss bc you can the loss to decrease after each epoch 

Making predictions 
    predictions 
Evaluate on never-before-seen digits 
Computer Vision
    CV led to the ..

CNN is a stack of Conv2D and MaxPooling2D
    inputs = keras.input 
    conv2D is a sequence of layers and passes its output to the next layer 
    CNN is a Conv2D and MaxPooling2D layers of these two 
    7 layers in this example 
Problem with MLP: its not translation invariant ! 
    training : picture of cat near right side 
    test : picture car near left side 
    MLP will fail if the cat is not exactly in the right position 

The convolution operation 
    look at image and look at the features within the image 
    -fundamental difference between a densely connected layer and convolution 

Lines and textures to simple objects to cat 
    - cat : look at features and then decide what to classify 

This is not a without problems 
    picture of features = face (test)
    picture of face = face (training )
    presents of the features not the distance of the features 

convolution with a 3x 3 filter (no depth)
    dot product : filter and image patch  = feature 
    focus on one feature (we have no idea what that feature is )
    each filter capture one feature 
    you choose the number of filters (hyper-parameter )

    filter is to detect one kind of feature 
    output maxtrix  = feature map : this map of input image and tells you if that feature you are looking for is in that section of the image 

CNN applied to image classification 
    early layers are simple feature (lines or shapes)
    later layers create higher level features / combine lower level features to more complex objects (eyes, nose, ears )

EXAM : slide 22 how to compute 
-----------------------
what is the probelm with using multilayer perceptron with photo with cats in different positions will not see the photos of the cat as  the same , while CNN will see the two photos of the cat as the same 

EXAM question : slide 16 with problem with MLP: its not translation invarient ! 

slide 18 : CNN properties 
    - the patterns that CNNs learn are translation invariant 
    - CNN can learn spatial hierarchies of patterns 
slide 19
learn simple features : lines and textures to simple objects to cat 

slide 20 
    issue with CNN

slide 22
    image 
    feature map : convolved feature 
        this position : this feature might be , the higher the number the more likley the feature is in there 
    KNOW HOW TO CALCULATE THIS FEATURE MAP !!!!!!!!!!!!

Adding the depth dimension 
    feature of colors in RGB and gives output 

CNN applied to image classification 
    - input --> feature learning --> classification 
    - detect edges from raw pixels in the first layer
    - use the detect simple shapes in higher layers 
    - the last layer is then a classifier that uses these high-level features 
CNN - know how to explain examples slide 25

Max pooling layers slide 29 
    - max pooling layer
    100x100 pixel and reduce to 25x25
        one idea: take the average of 2x2 
        MAP pool : take the max pixel color / pick the largest value 

Map pooling slide 30
    -down sample - the input b/c convolution operation look at increasinnly large windows 
    -to find more complex features from edges and lines 

Full model slide 31
    - will extract features -automatically 
    - condensing the images / features to camputing larger areas on the input 
    - why CNN - detect features and combine features --> to classify 
    
